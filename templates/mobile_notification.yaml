- trigger:
    - trigger: state
      id: incoming
      entity_id: sensor.pixel_9_pro_last_notification
      to: ~
    # Trigger back to "unavailable" after 10 seconds — this ensures subsequent
    # notifications with identical attributes are properly picked up on by the
    # triggers further down this file (unless they happen within the "reset"
    # interval; a non-issue in these use-cases)
    # Without this reset, a trigger looking for a notification with a certain
    # attribute (e.g. package == com.icemobile.albertheijn) would not trigger
    # on subsequent notifications from the same package (but with a different
    # message/payload).
    - trigger: state
      entity_id: sensor.pixel_9_pro_last_notification
      to: ~
      for: "00:00:10"
  sensor:
    - name: Last Notification (unprocessed)
      unique_id: 1c27807f-ffd8-482e-b374-06b33195c128
      availability: >-
        {{ trigger.id == 'incoming' }}
      attributes:
        package: >-
          {{
            state_attr('sensor.pixel_9_pro_last_notification', 'package')
          }}
        post_time: >-
          {{
            ((state_attr('sensor.pixel_9_pro_last_notification', 'post_time')
              | int) / 1000) | round(0) | as_datetime
          }}
      state: >-
        {{ states('sensor.pixel_9_pro_last_notification') }}
- trigger:
    - trigger: state
      entity_id: sensor.last_notification_unprocessed
      attribute: package
      to: com.icemobile.albertheijn
  sensor:
    - name: Last Notification – Albert Heijn ETA
      unique_id: f0ddb0ee-cecb-4444-bee6-4e39daf60946
      icon: mdi:basket-outline
      # cspell: disable
      availability: >-
        {#
          Message should have been posted _less_ than 1-hour ago – unless the
          message explicitly mentions "morgen" (tomorrow), the sensor assumes
          the ETA concerns today. As such, this prevents old/stale messages from
          unintentionally being interpreted as still relevant...
        #}
        {%
          if state_attr('sensor.last_notification_unprocessed', 'post_time') |
            as_timestamp(0) | as_datetime >= now() - timedelta(hours=1) and
          states('sensor.last_notification_unprocessed') is
            search(
              'verwacht(?:en)?(?: ?morgen) tussen \d{2}:\d{2} ' ~
              'en \d{2}:\d{2} uur bij je te zijn')
        %}
          {{ true }}
        {# Handle the "Te vroeg"-message #}
        {% elif states('sensor.last_notification_unprocessed') is
          search('mogelijk al tussen')
        %}
          {{ true }}
        {# Ignore the "Er is een update over je bestelling online"-message #}
        {% elif states('sensor.last_notification_unprocessed') is
            search('een update over je bestelling') and
          this.state not in ['unknown', 'unavailable']
        %}
          {{ true }}
        {% endif %}
      attributes:
        interval: >-
          {%
            set eta = states('sensor.last_notification_unprocessed')  |
                regex_findall('tussen (\d{2}:\d{2}) en (\d{2}:\d{2}) uur')
          %}
          {% if eta != [] and eta[0] != [] %}
            {{
              (today_at(eta[0][1]) | as_timestamp -
                today_at(eta[0][0]) | as_timestamp) | int(0)
            }}
          {# Otherwise, retain the current interval-attribute #}
          {% elif this.attributes is defined and this.attributes.interval > 0 %}
            {{ this.attributes.interval }}
          {% endif %}
      state: >-
        {%
          set eta = states('sensor.last_notification_unprocessed') |
              regex_findall('tussen (\d{2}:\d{2}) en (\d{2}:\d{2}) uur')
        %}
        {% if eta != [] and eta[0] != [] %}
          {%
            if states('sensor.last_notification_unprocessed')
              is search(' morgen ')
          %}
            {{ today_at(eta[0][0]) + timedelta(days = 1) }}
          {% else %}
            {{ today_at(eta[0][0]) }}
          {% endif %}
        {# Otherwise, retain the current state #}
        {% elif this.state not in ['unknown', 'unavailable'] %}
          {{ this.state }}
        {% endif %}
      # cspell: enable
