# Office chairs occupancy (proxy for Attic occupancy)
- trigger:
    # Using vibration sensors on the office chairs to infer occupancy of the
    # Attic (i.e. the "Office" ðŸ˜‰) â€“ the vibration itself is not always strong
    # enough, so changes to either orientation or tilt angle are also taken into
    # account
    - platform: state
      entity_id:
        - binary_sensor.vibration_102
        - binary_sensor.vibration_106
      from: "off"
      to: "on"
    - platform: state
      entity_id:
        - binary_sensor.vibration_102
        - binary_sensor.vibration_106
      attribute: orientation
    - platform: state
      entity_id:
        - binary_sensor.vibration_102
        - binary_sensor.vibration_106
      attribute: tiltangle
  binary_sensor:
    - name: Occupancy (Office chairs)
      unique_id: 3ff1e67a-37ba-443c-b390-e9d2bdf4b07f
      icon: mdi:account-check
      device_class: occupancy
      # Require *two* triggers (of which at least *one* changes the sensor's
      # state â€” hence the use of "last changed") on a single sensor in 30-minute
      # interval to detect occupancy. This prevents momentarily sitting down or
      # bumping into a chair from detecting occupancy....
      state: >-
        {% if this.state == 'off' %}
          {#
            The sensor's "last changed" should be at least 30-seconds old. The
            attributes lag slightly behind the main state; without this
            condition a single event that updates both state and (one of) the
            attributes would incorrectly satisfy the "*two* triggers"
            requirement...
          #}
          {{
            (trigger.from_state.last_changed | as_local) +
              timedelta(seconds = 30) >= now()
            and
            (trigger.from_state.last_changed | as_local) +
              timedelta(minutes = 30) >= now()
          }}
        {% else %}
          {{ this.state }}
        {% endif %}
      # Empirically determined that we move around in our chairs at least once
      # every half an hour...
      auto_off: "00:30:00"
# Attic occupancy â€“ combination of the office chairs occupancy and the state of
# the lights, under the condition that someone is home
- trigger:
    - platform: state
      entity_id: group.family
      to: ~
    - platform: state
      entity_id: binary_sensor.occupancy_office_chairs
      to: ~
    - platform: state
      entity_id: light.attic
      for: "00:05:00"
    # Additional triggers to short-circuit "Office chairs occupancy"
    - platform: state
      entity_id: light.attic
      from: "on"
      to: "off"
      for: "00:10:00"
    - platform: state
      entity_id: light.attic
      from: "on"
      to: "off"
      for: "00:15:00"
    - platform: state
      entity_id: light.attic
      from: "on"
      to: "off"
      for: "00:30:00"
  binary_sensor:
    - name: Occupancy (Attic)
      unique_id: e3a6437c-8269-4005-9d17-ac7f2e45e8d5
      icon: mdi:account-check
      device_class: occupancy
      state: >-
        {% if states('group.family') == 'not_home' %}
          {{ false }}
        {#
          Switching off the Attic lights most likely indicates the Attic is no
          longer occupied â€” it's possible though the lights got switched off
          because it's simply bright enough without them... Here we short-
          circuit the state of "Office chairs occupancy" to better handle this
          situation:
           1. If the light get switched off and there's no motion in the chairs
              (checked over a 5-, 10- and 15-minute period; with some margin to
              account for the time the vibration sensor retains its "on"-state),
              toggle off occupancy. In this situation it doesn't make sense to
              wait the full 30-minutes it takes for "Office chairs occupancy" to
              clear naturally.
           2. If the vibration sensors get triggered after the lights are
              switched off, retrigger Attic occupancy (this workaround is needed
              because "Office chairs occupancy" remains in its "on"-state in
              this case). The 30-minutes delayed trigger is added specifically
              for this purpose (it has no impact on the first use-case).
        #}
        {%
          elif trigger.entity_id == 'light.attic' and
            trigger.for is defined and states('light.attic') == 'off'
        %}
          {{
            (states.binary_sensor.vibration_102.last_changed | as_local) +
              trigger.for - timedelta(seconds = 90) >= now() or
            (states.binary_sensor.vibration_106.last_changed | as_local) +
              trigger.for - timedelta(seconds = 90) >= now()
          }}
        {% else %}
          {{
            states('binary_sensor.occupancy_office_chairs') == 'on' or
              states('light.attic') == 'on'
          }}
        {% endif %}
