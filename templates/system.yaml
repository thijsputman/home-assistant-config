- binary_sensor:
    # Power outage detection based on back-up UPS. To filter out minor hiccups,
    # this triggers when the UPS is discharging and battery level dips below
    # 98%. Under current load this happens after about 40 seconds...
    # If the battery charge sensor is unavailable, assume it to be at 100%-
    # charge. A false-positive on the power outage sensor might have rather
    # severe consequences, so err on the side of caution.
    - name: Power outage
      unique_id: 679eb3a5-4052-445c-979c-a72cb5796048
      device_class: problem
      icon: mdi:transmission-tower
      availability: >-
        {{ states('sensor.ups_status') not in ['unknown', 'unavailable'] }}
      state: >-
        {%- if
          states('sensor.ups_battery_charge')|int(100) < 98 and
          states('sensor.ups_status') == 'On Battery Battery Discharging'
        -%}
          on
        {%- else -%}
          off
        {%- endif -%}
# JSON-encoded list of failed devices – renders every 5 minutes. The list is
# sorted and deduplicated so this sensor's state only changes if a device
# becomes (un)available. Device can be either "native" Home Assistant devices
# or manually grouped sets of related sensors.
- trigger:
    - platform: time_pattern
      hours: "*"
      minutes: /5
      seconds: 0
  sensor:
    - name: Failed devices
      unique_id: b35c9d1a-715b-4216-a620-6308c47e0e8f
      icon: mdi:toy-brick-remove-outline
      # Find all "devices" that have one or more entities in the "unavailable"-
      # or "unknown"-state. If an actual device is not available, attempt to
      # manually group the sensor(s). Only if we're unable to group, are the
      # individual sensors included in the list.
      # Hidden entities (as per the GUI) are excluded. This is the primary means
      # of filtering out false-positives (ie, entities that are unavailable as
      # part of their normal operation). Only under special circumstances should
      # the below template be used for filtering...
      state: >-
        {% set result = namespace(devices=[]) %}
        {%
          set entity_ids = states |
          selectattr('state', 'in',
            [
              'unavailable',
              'unknown'
            ]
          ) |
          map(attribute='entity_id') |
          reject('is_hidden_entity') |
          reject('match', '^(scene|button|event|group)\.') |
          list
        %}
        {% for entity_id in entity_ids %}
          {% set matched = 'unknown' %}
          {# Individual entities (not part of a device) #}
          {% if device_id(entity_id) == None %}
            {# WeeWX #}
            {% if entity_id is search('^sensor\.weewx_.+') %}
              {% set matched = 'WeeWX' %}
            {# Aarlo #}
            {% elif entity_id is search('^(?:binary_|)sensor\.aarlo_.+') %}
              {% set matched = 'Aarlo' %}
            {# Gammu #}
            {% elif entity_id is search('^sensor\.gammu_.+') %}
              {% set matched = 'Gammu' %}
            {# Afvalwijzer #}
            {% elif entity_id is search('^sensor\.afvalwijzer_.+') %}
              {#
                Afvalwijzer only adds next year's dates towards the end of the
                current calendar year – as a result, over the course of December
                some sensors (specifically _not_ those for today and tomorrow)
                run out of data and become "unavailable"...
              #}
              {% if entity_id is search('today|tomorrow') %}
                {% set matched = 'Afvalwijzer' %}
              {% elif now().month != 12 %}
                {% set matched = 'Afvalwijzer' %}
              {% endif %}
            {# Hue scene heuristic #}
            {% elif entity_id is search('^sensor\.hue_scene_.+') %}
              {% set matched = 'Hue scene heuristic' %}
            {# Failed devices (this sensor itself) #}
            {% elif entity_id == 'sensor.failed_devices' %}
              {# Ignored – to prevent unintentional recursion #}
            {# Others; ungrouped #}
            {% else %}
              {% set matched = state_attr(entity_id, 'friendly_name') %}
            {% endif %}
          {# Devices #}
          {% else %}
            {% set matched = device_attr(device_id(entity_id), 'name') %}
          {% endif %}
          {% set result.devices = result.devices + [matched] %}
        {% endfor %}
        {#
          A state's value can be at most 255 characters. Truncate JSON output to
          245 characters and append a "closing" ellipsis – the regex is used to
          cope with the edge cases where the brute force replace causes invalid
          JSON...
          Not very graceful, but given the limited control structures available
          in Jinja the below is much simpler than trying to properly implement
          this in the preceding for-loop.
        #}
        {{
          result.devices | reject('eq', 'unknown') |
            unique | list | sort | to_json |
            truncate(245, true, '..."]') |
            regex_replace('",? ?"?\.\.\."]$', '..."]')
        }}
- trigger:
    - platform: time_pattern
      hours: "*"
      minutes: /5
      seconds: 5 # Slightly offset from the "Failed devices"-sensor
  sensor:
    - name: Low battery devices
      unique_id: e916b841-5ade-4b71-9c54-5934565c4a3f
      icon: mdi:battery-alert-variant-outline
      state: >-
        {% set result = namespace(devices=[]) %}
        {%
          set entity_ids = states |
          selectattr('attributes.device_class', 'defined') |
          selectattr('attributes.device_class', 'eq', 'battery') |
          map(attribute='entity_id') |
          reject('is_hidden_entity') |
          list
        %}
        {% for entity_id in entity_ids %}
          {# Cannot use "selectattr" to do a numeric comparison on state #}
          {% if states(entity_id) | int(100) < 20 %}
            {% if device_id(entity_id) == None %}
              {% set matched = state_attr(entity_id, 'friendly_name') %}
            {% else %}
              {% set matched = device_attr(device_id(entity_id), 'name') %}
            {% endif %}
            {% set result.devices = result.devices + [matched] %}
          {% endif %}
        {% endfor %}
        {{
          result.devices | unique | list | sort | to_json |
            truncate(245, true, '..."]') |
            regex_replace('",? ?"?\.\.\."]$', '..."]')
        }}
