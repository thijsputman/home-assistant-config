# DSMR (Dutch Slimme Meter Requirements)

- platform: derivative
  name: Hourly Gas Consumption
  round: 3
  source: sensor.gas_consumption
  unit_time: h
  unit: m³/h
  time_window: "01:00:00"

- platform: template
  sensors:
    # Peak and off-peak cumulative measurements
    daily_energy:
      friendly_name: Daily energy
      unit_of_measurement: kWh
      value_template: >-
        {{
          (
            states('sensor.daily_energy_offpeak')|float +
            states('sensor.daily_energy_peak')|float
          ) | round(3)
        }}
      attribute_templates:
        last_period: >-
          {{
            (
              state_attr('sensor.daily_energy_offpeak', 'last_period')|float +
              state_attr('sensor.daily_energy_peak', 'last_period')|float
            ) | round(3)
          }}
    monthly_energy:
      friendly_name: Monthly energy
      unit_of_measurement: kWh
      value_template: >-
        {{
          (
            states('sensor.monthly_energy_offpeak')|float +
            states('sensor.monthly_energy_peak')|float
          ) | round(3)
        }}
      attribute_templates:
        last_period: >-
          {{
            (
              state_attr('sensor.monthly_energy_offpeak', 'last_period')|float +
              state_attr('sensor.monthly_energy_peak', 'last_period')|float
            ) | round(3)
          }}
    # Energy costs
    daily_energy_costs:
      friendly_name: Daily energy costs
      unit_of_measurement: €
      value_template: >-
        {{
          (
            (states('sensor.daily_energy_offpeak')|float *
              states('input_number.rate_energy_offpeak')|float) +
            (states('sensor.daily_energy_peak')|float *
              states('input_number.rate_energy_peak')|float)
          ) | round(2)
        }}
      attribute_templates:
        last_period: >-
          {{
            (
              (state_attr('sensor.daily_energy_offpeak', 'last_period')|float *
                states('input_number.rate_energy_offpeak')|float) +
              (state_attr('sensor.daily_energy_peak', 'last_period')|float *
                states('input_number.rate_energy_peak')|float)
            ) | round(2)
          }}
    monthly_energy_costs:
      friendly_name: Monthly energy costs
      unit_of_measurement: €
      value_template: >-
        {{
          (
            (states('sensor.monthly_energy_offpeak')|float *
              states('input_number.rate_energy_offpeak')|float) +
            (states('sensor.monthly_energy_peak')|float *
              states('input_number.rate_energy_peak')|float)
          ) | round(2)
        }}
      attribute_templates:
        last_period: >-
          {{
            (
              (state_attr('sensor.monthly_energy_offpeak', 'last_period')|float *
                states('input_number.rate_energy_offpeak')|float) +
              (state_attr('sensor.monthly_energy_peak', 'last_period')|float *
                states('input_number.rate_energy_peak')|float)
            ) | round(2)
          }}
    monthly_energy_costs_daily_average:
      friendly_name: Monthly energy costs (daily average)
      unit_of_measurement: €
      # More complex than the "last_period" calculation as we need to
      # disregard today's (incomplete) value to prevent skewing the average.
      value_template: >-
        {% if now().today().day|int <= 1 %}
          {{
            (
              (states('sensor.daily_energy_offpeak')|float *
                states('input_number.rate_energy_offpeak')|float) +
              (states('sensor.daily_energy_peak')|float *
                states('input_number.rate_energy_peak')|float)
            ) | round(2)
          }}
        {% else %}
          {{
            (
              (
                (
                  (states('sensor.monthly_energy_offpeak')|float -
                    states('sensor.daily_energy_offpeak')|float) *
                  states('input_number.rate_energy_offpeak')|float
                ) +
                (
                  (states('sensor.monthly_energy_peak')|float -
                    states('sensor.daily_energy_peak')|float) *
                  states('input_number.rate_energy_peak')|float
                )
              ) / (now().today().day|int - 1)
            ) | round(2)
          }}
        {% endif %}
      attribute_templates:
        last_period: >-
          {{
            (
              (
                (state_attr('sensor.monthly_energy_offpeak', 'last_period')|float *
                  states('input_number.rate_energy_offpeak')|float) +
                (state_attr('sensor.monthly_energy_peak', 'last_period')|float *
                  states('input_number.rate_energy_peak')|float)
              ) / (
                strptime(
                  state_attr('sensor.monthly_energy_offpeak', 'last_reset'),
                  '%Y-%m-%dT%H:%M:%S.%f%z'
                ) - timedelta(days=1)
              ).day|int
            ) | round(2)
          }}
    # Gas costs
    daily_gas_costs:
      friendly_name: Daily gas costs
      unit_of_measurement: €
      value_template: >-
        {{
          (
            states('sensor.daily_gas')|float *
            states('input_number.rate_gas')|float
          ) | round(2)
        }}
      attribute_templates:
        last_period: >-
          {{
            (
              state_attr('sensor.daily_gas', 'last_period')|float *
              states('input_number.rate_gas')|float
            ) | round(2)
          }}
    monthly_gas_costs:
      friendly_name: Monthly gas costs
      unit_of_measurement: €
      value_template: >-
        {{
          (
            states('sensor.monthly_gas')|float *
            states('input_number.rate_gas')|float
          ) | round(2)
        }}
      attribute_templates:
        last_period: >-
          {{
            (
              state_attr('sensor.monthly_gas', 'last_period')|float *
              states('input_number.rate_gas')|float
            ) | round(2)
          }}
    monthly_gas_costs_daily_average:
      friendly_name: Monthly gas costs (daily average)
      unit_of_measurement: €
      # More complex than the "last_period" calculation as we need to
      # disregard today's (incomplete) value to prevent skewing the average.
      value_template: >-
        {% if now().today().day|int <= 1 %}
          {{
            (
              states('sensor.daily_gas')|float *
              states('input_number.rate_gas')|float
            ) | round(2)
          }}
        {% else %}
          {{
            (
              (
                (
                  states('sensor.monthly_gas')|float -
                  states('sensor.daily_gas')|float
                ) *
                states('input_number.rate_gas')|float
              ) / (now().today().day|int - 1)
            ) | round(2)
          }}
        {% endif %}
      attribute_templates:
        last_period: >-
          {{
            (
              (
                state_attr('sensor.monthly_gas', 'last_period')|float *
                states('input_number.rate_gas')|float
              ) / (
                strptime(
                  state_attr('sensor.monthly_gas', 'last_reset'),
                  '%Y-%m-%dT%H:%M:%S.%f%z'
                ) - timedelta(days=1)
              ).day|int
            ) | round(2)
          }}
