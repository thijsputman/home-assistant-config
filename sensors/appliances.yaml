# (Ab?)using the Utility Meter to measure consumption/costs of a select number
# appliances

- platform: template
  sensors:
    # Close-in Boiler (Kitchen)
    monthly_consumption_costs_boiler_kitchen:
      friendly_name: Monthly costs (Close-in boiler – Kitchen)
      unit_of_measurement: €
      # Runs mostly during peak-hours, use peak-rate to approximate costs
      value_template: >-
        {{
          (
            (states('sensor.monthly_consumption_boiler_kitchen')|float *
              states('input_number.rate_energy_peak')|float)
          ) | round(2)
        }}
      attribute_templates:
        last_period: >-
          {{
            (
              (state_attr('sensor.monthly_consumption_boiler_kitchen',
                  'last_period')|float *
                states('input_number.rate_energy_peak')|float)
            ) | round(2)
          }}
    # Electric heater (Shed)
    monthly_consumption_costs_heater_shed:
      friendly_name: Monthly costs  (Electric heater – Shed)
      unit_of_measurement: €
      # Runs all-day round, use average of the two rates to approximate costs
      value_template: >-
        {{
          (
            (states('sensor.monthly_consumption_heater_shed')|float *
              (states('input_number.rate_energy_peak')|float +
              states('input_number.rate_energy_offpeak')|float) / 2)
          ) | round(2)
        }}
      attribute_templates:
        last_period: >-
          {{
            (
              (state_attr('sensor.monthly_consumption_heater_shed',
                  'last_period')|float *
                (states('input_number.rate_energy_peak')|float +
                states('input_number.rate_energy_offpeak')|float) / 2)
            ) | round(2)
          }}
    # Washing machine
    binary_washing_machine:
      friendly_name: Washing machine
      device_class: power
      value_template: >-
        {%- if states('sensor.power_86_actual') in ['unknown', 'unavailable'] -%}
          {{ states('sensor.power_86_actual') }}
        {%- elif states('sensor.power_86_actual')|float > 0 -%}
          on
        {%- else -%}
          off
        {%- endif -%}
    monthly_consumption_costs_washing_machine:
      friendly_name: Monthly costs (Washing machine)
      unit_of_measurement: €
      # Runs mostly off-peak, use that rate to approximate
      value_template: >-
        {{
          (
            (states('sensor.monthly_consumption_washing_machine')|float *
              states('input_number.rate_energy_offpeak')|float)
          ) | round(2)
        }}
      attribute_templates:
        last_period: >-
          {{
            (
              (state_attr('sensor.monthly_consumption_washing_machine',
                  'last_period')|float *
                states('input_number.rate_energy_offpeak')|float)
            ) | round(2)
          }}
    # Dryer
    monthly_consumption_costs_dryer:
      friendly_name: Monthly costs (Dryer)
      unit_of_measurement: €
      # Runs mostly off-peak, use that rate to approximate
      value_template: >-
        {{
          (
            (states('sensor.monthly_consumption_dryer')|float *
              states('input_number.rate_energy_offpeak')|float)
          ) | round(2)
        }}
      attribute_templates:
        last_period: >-
          {{
            (
              (state_attr('sensor.monthly_consumption_dryer',
                  'last_period')|float *
                states('input_number.rate_energy_offpeak')|float)
            ) | round(2)
          }}
    # Dishwasher
    binary_dishwasher:
      friendly_name: Dishwasher
      device_class: power
      # Dryer's idle/standby consumption is 3 Watt
      value_template: >-
        {%- if states('sensor.power_88_actual') in ['unknown', 'unavailable'] -%}
          {{ states('sensor.power_88_actual') }}
        {%- elif states('sensor.power_88_actual')|float > 3 -%}
          on
        {%- else -%}
          off
        {%- endif -%}
    monthly_consumption_costs_dishwasher:
      friendly_name: Monthly costs (Dishwasher)
      unit_of_measurement: €
      # Runs mostly off-peak, use that rate to approximate
      value_template: >-
        {{
          (
            (states('sensor.monthly_consumption_dishwasher')|float *
              states('input_number.rate_energy_offpeak')|float)
          ) | round(2)
        }}
      attribute_templates:
        last_period: >-
          {{
            (
              (state_attr('sensor.monthly_consumption_dishwasher',
                  'last_period')|float *
                states('input_number.rate_energy_offpeak')|float)
            ) | round(2)
          }}
    # Airco (Attic)
    binary_airco_attic:
      friendly_name: Airco (Attic)
      device_class: power
      # Airco idle/standby consumption is 1 Watt
      value_template: >-
        {%- if states('sensor.power_99') in ['unknown', 'unavailable'] -%}
          {{ states('sensor.power_99') }}
        {%- elif states('sensor.power_99')|float > 1 -%}
          on
        {%- else -%}
          off
        {%- endif -%}
    monthly_consumption_costs_airco_attic:
      friendly_name: Monthly costs (Airco – Attic)
      unit_of_measurement: €
      # Runs mostly during peak-hours, use peak-rate to approximate costs
      value_template: >-
        {{
          (
            (states('sensor.monthly_consumption_airco_attic')|float *
              states('input_number.rate_energy_peak')|float)
          ) | round(2)
        }}
      attribute_templates:
        last_period: >-
          {{
            (
              (state_attr('sensor.monthly_consumption_airco_attic',
                  'last_period')|float *
                states('input_number.rate_energy_peak')|float)
            ) | round(2)
          }}
    # All lights
    monthly_consumption_costs_all_lights:
      friendly_name: Monthly costs (All lights)
      unit_of_measurement: €
      # Use average of the two rates to approximate costs
      value_template: >-
        {{
          (
            (states('sensor.monthly_consumption_all_lights')|float *
              (states('input_number.rate_energy_peak')|float +
              states('input_number.rate_energy_offpeak')|float) / 2)
          ) | round(2)
        }}
      attribute_templates:
        last_period: >-
          {{
            (
              (state_attr('sensor.monthly_consumption_all_lights',
                  'last_period')|float *
                (states('input_number.rate_energy_peak')|float +
                states('input_number.rate_energy_offpeak')|float) / 2)
            ) | round(2)
          }}
    monthly_consumption_costs_ups:
      friendly_name: Monthly costs (Back-UPS Pro 900)
      unit_of_measurement: €
      # Use average of the two rates to approximate costs
      value_template: >-
        {{
          (
            (states('sensor.monthly_consumption_ups')|float *
              (states('input_number.rate_energy_peak')|float +
              states('input_number.rate_energy_offpeak')|float) / 2)
          ) | round(2)
        }}
      attribute_templates:
        last_period: >-
          {{
            (
              (state_attr('sensor.monthly_consumption_ups',
                  'last_period')|float *
                (states('input_number.rate_energy_peak')|float +
                states('input_number.rate_energy_offpeak')|float) / 2)
            ) | round(2)
          }}
