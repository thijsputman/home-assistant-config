type: vertical-stack
cards:
  - type: markdown
    title: Systems' status
    card_mod:
      style:
        ha-markdown$: |
          h2{
            font-weight: normal !important;
            font-size: 1.2em !important;
          }
        ha-markdown$ha-alert:
          $: |
            div.warning, div.error{
              margin-bottom: 6px;
            }
    content: |
      {%
        set updates=expand('group.sbc_apt') |
          selectattr('state', 'eq', 'on') | list | length
      %}
      {%
        set reboots=expand('group.sbc_reboot') |
          selectattr('state', 'eq', 'on') | map(attribute='entity_id') | list
      %}
      {%
        set status=expand('group.sbc_status') |
          rejectattr('state', 'in', ['unavailable', 'unknown']) |
          selectattr('state', 'ne', 'running') | map(attribute='entity_id') |
          list
      %}
      {%- if reboots | length > 0 -%}
        {%- for entity_id in reboots -%}
          <ha-alert alert-type="warning">**{{-device_attr(entity_id,
            'name')-}}** requires a restart.</ha-alert>
        {%- endfor -%}
        <br/>
      {%- endif -%}
      {%- if status | length > 0 -%}
        {%- for entity_id in status -%}
          <ha-alert alert-type="error">systemd reports **{{-device_attr(entity_id,
            'name')-}}** is _{{ states(entity_id) }}_!</ha-alert>
        {%- endfor -%}
        <br/>
      {% endif %}
      ## <ha-icon icon="mdi:package-variant-closed-plus"></ha-icon> **{{-
        updates if updates > 0 else 'no' }} {{
          'devices** have' if updates != 1 else 'device** has'
        }} package upgrades available
  - type: custom:auto-entities
    card:
      type: grid
      columns: 2
      square: false
    card_param: cards
    filter:
      include:
        - group: group.sbc_apt
          state: "on"
          options:
            type: tile
            show_entity_picture: true
            name: â€‹ # Zero-width space
            card_mod:
              style:
                ha-tile-info$: |
                  span.primary::before{
                    content: '{{ device_attr(config.entity, 'name') }}'
                  }
                  span.secondary::after{
                    content: ' package(s)'
                  }
    show_empty: false
