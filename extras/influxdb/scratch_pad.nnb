{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# Scratch-pad\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "require(\"dotenv\").config();\n\nconst { InfluxDB } = require(\"@influxdata/influxdb-client\");\nconst client = new InfluxDB({\n  url: \"https://eu-central-1-1.aws.cloud2.influxdata.com\",\n  token: process.env.INFLUXDB_TOKEN,\n});\nconst queryApi = client.getQueryApi(process.env.INFLUXDB_ORG);\n\n// console.log() By default outputs a maximum of 100 array-elements\nutil.inspect.defaultOptions.maxArrayLength = null;\n\nconsole.log(client.transport.defaultOptions.hostname);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Cumulative energy consumption â€“ yesterday\n\nThe below use a \"1-hour aggregate-window mean\" as a poor man's way of turning kW\ninto kWh (better solutions exist â€“ haven't really bothered yet though ðŸ˜‰).\n\nStill, this (rough) approach approximates the actual numbers quite well...\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "```flux\nimport \"date\"\nimport \"experimental\"\n\nyesterday = date.truncate(\n  t: experimental.subDuration(d: 1d, from: now()),\n  unit: 1d\n)\n\nfrom(bucket: \"home-assistant\")\n  |> range(start: yesterday, stop: today())\n  |> filter(fn:\n    (r) => r[\"entity_id\"] == \"power_consumption\"\n      and r[\"_field\"] == \"value\"\n  )\n  |> aggregateWindow(every: 1h, fn: mean)\n  |> cumulativeSum(columns: [\"_value\"])\n```\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const query = `\nimport \"date\"\nimport \"experimental\"\n\nyesterday = date.truncate(\n  t: experimental.subDuration(d: 1d, from: now()),\n  unit: 1d\n)\n\nfrom(bucket: \"home-assistant\")\n  |> range(start: yesterday, stop: today())\n  |> filter(\n    fn: (r) => r[\"entity_id\"] == \"power_consumption\"\n      and r[\"_field\"] == \"value\"\n  )\n  |> aggregateWindow(every: 1h, fn: mean)\n  |> cumulativeSum(columns: [\"_value\"])\n`;\n\nconst result = await queryApi.collectRows(query);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Daily total energy consumption â€“ past year\n\nEverything is a bit messed up timezone-wise: `today()` (and `yesterday` from the\nprevious query) are UTC-based, but do somehow correctly aggregate daily totals\nbased on CE(S)T dates... ðŸ¤”\n\nAlthough the data is correctly aggregated on CE(S)T dates, around the fringes of\nthe output some problems occur (see comment in the query).\n\nSetting the timezone of the aggregate-window(s) to the correct value has no\neffect (or, it makes things worse by offsetting all daily totals by one or two\nhours â€“ CET or CEST respectively).\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "```flux\nfrom(bucket: \"home-assistant\")\n  |> range(start: -1y, stop: today())\n  |> filter(fn:\n    (r) => r[\"entity_id\"] == \"power_consumption\"\n      and r[\"_field\"] == \"value\"\n  )\n  |> aggregateWindow(every: 1h, fn: mean)\n  |> aggregateWindow(every: 1d, fn: sum)\n  // An additional/duplicate entry shows up for the last day in the result which\n  // contains one/two hours of data from the following day (the CET/CEST to UTC\n  // offset?). Grouping by \"_time\" and taking the \"last()\" entry for each group\n  // drops the invalid measurement from the result...\n  |> group(columns: [\"_time\"],  mode:\"by\")\n  |> last()\n  |> timeShift(duration: -1d)\n```\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const query = `\nfrom(bucket: \"home-assistant\")\n  |> range(start: -1y, stop: today())\n  |> filter(fn:\n    (r) => r[\"entity_id\"] == \"power_consumption\"\n      and r[\"_field\"] == \"value\"\n  )\n  |> aggregateWindow(every: 1h, fn: mean)\n  |> aggregateWindow(every: 1d, fn: sum)\n  |> group(columns: [\"_time\"],  mode:\"by\")\n  |> last()\n  |> timeShift(duration: -1d)\n`;\n\nconst result = await queryApi.collectRows(query);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Daily energy consumption one minute resolution â€“ past week\n\n```flux\n  |> range(start: -7d, stop: today())\n  |> filter(fn:\n    (r) => r[\"entity_id\"] == \"power_consumption\"\n      and r[\"_field\"] == \"value\"\n  )\n  // Data reported every 30-40s â€“ 1m average gives most stable result\n  |> aggregateWindow(every: 1m, fn: mean)\n```\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const query = `\nfrom(bucket: \"home-assistant\")\n  |> range(start: -7d, stop: today())\n  |> filter(fn:\n    (r) => r[\"entity_id\"] == \"power_consumption\"\n      and r[\"_field\"] == \"value\"\n  )\n  |> aggregateWindow(every: 1m, fn: mean)\n`;\n\nconst result = await queryApi.collectRows(query);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Arlo battery level\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const query = `\nfrom(bucket: \"home-assistant\")\n  |> range(start: -1y, stop: today())\n  |> filter(\n    fn: (r) => r[\"entity_id\"] == \"aarlo_battery_level_front\"\n      and r[\"_field\"] == \"value\"\n  )\n  |> aggregateWindow(every: 1d, fn: min)\n  |> group(columns: [\"_time\"],  mode:\"by\")\n  |> timeShift(duration: -1d)\n`;\n\nconst result = await queryApi.collectRows(query);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Outside temperature\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import { op, table } from \"arquero\";\n\nconst query = `\nfrom(bucket: \"home-assistant\")\n  |> range(start: -1y, stop: today())\n  |> filter(fn:\n    (r) => r[\"entity_id\"] == \"weewx_outside_temperature\"\n      and r[\"_field\"] == \"value\"\n  )\n  |> aggregateWindow(every: 1d, fn: mean)\n  |> timeShift(duration: -1d)\n`;\n\nconst result = await queryApi.collectRows(query);\n\nconst dt = table({\n  time: result.map((obj) => obj[\"_time\"]),\n  value: result.map((obj) => obj[\"_value\"]),\n});\n\ndt.derive({ month: (d) => op.month(d.time), year: (d) => op.year(d.time) })\n  .groupby(\"year\", \"month\")\n  .rollup({ mean: (d) => op.mean(d.value) })\n  .print();\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Pi-hole unique clients\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const query = `\nfrom(bucket: \"home-assistant\")\n  |> range(start: -1y, stop: today())\n  |> filter(\n    fn: (r) => r[\"entity_id\"] == \"pi_hole_dns_unique_clients\"\n      and r[\"_field\"] == \"value\"\n  )\n  |> aggregateWindow(every: 1d, fn: min)\n  |> group(columns: [\"_time\"],  mode:\"by\")\n  |> timeShift(duration: -1d)\n`;\n\nconst result = await queryApi.collectRows(query);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Watermeter total\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const query = `\nfrom(bucket: \"home-assistant\")\n  |> range(start: -1y, stop: today())\n  |> filter(\n    fn: (r) => r[\"entity_id\"] == \"watermeter_total\"\n      and r[\"_field\"] == \"value\"\n  )\n  |> aggregateWindow(every: 1d, fn: min)\n  |> group(columns: [\"_time\"],  mode:\"by\")\n  |> timeShift(duration: -1d)\n`;\n\nconst result = await queryApi.collectRows(query);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Output\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "console.log(result.map((obj) => `${obj[\"_time\"]} ${obj[\"_value\"]}`));\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const { Plotly } = require(\"node-kernel\");\nconst data = [\n  {\n    x: result.map((obj) => obj[\"_time\"]),\n    y: result.map((obj) => obj[\"_value\"]),\n    type: \"scatter\",\n    mode: \"lines\",\n    connectgaps: true,\n  },\n];\nconst layout = {\n  yaxis: {\n    rangemode: \"tozero\",\n  },\n  height: 400,\n  width: 1000,\n};\nPlotly.newPlot(\"foo\", data, layout);\n"
            ],
            "outputs": []
        }
    ]
}