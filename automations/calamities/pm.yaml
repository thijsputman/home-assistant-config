- alias: ðŸ¤¯/ðŸš¬ | ðŸ“±/ðŸ”Š/ðŸš¨ High PM levels detected
  id: 0685ba4b-5229-4404-a481-a07475c4908f
  trigger:
    # Empirically determined thresholds (after tracking data for a year) for
    # extremely high PM levels on a per sensor basis. PM10 closely tracks PM2.5,
    # so it's sufficient to trigger on PM2.5 alone...
    - platform: numeric_state
      entity_id: >-
        sensor.qingping_air_monitor_lite_living_room_environment_pm2_5_density
      above: 500
    - platform: numeric_state
      entity_id: >-
        sensor.qingping_air_monitor_lite_bedroom_environment_pm2_5_density
      above: 250
    - platform: numeric_state
      entity_id: sensor.xiaomi_miot_environment_pm2_5_density # Attic
      above: 150
  condition: []
  action:
    - service: script.turn_on
      target:
        entity_id: script.sms_notification
      data:
        variables:
          message: >-
            ðŸš¬ High PM level detected!\n
            PM2.5 in the {{ area_name(trigger.entity_id) }} is above
            {{ trigger.above }} Âµg/mÂ³!
    # Queue TTS announcement (released when silencing the sirens)
    - service: script.turn_on
      target:
        entity_id: script.tts_queue
      data:
        variables:
          channel: announce
          tag: calamity
          priority: attention
          expiry: "00:10:00"
          message: >-
            PM 2.5 in the {{ area_name(trigger.entity_id) }} is above
            {{ trigger.above }} microgram per cubic meter!
    # If we're asleep, step up the urgency as the situation could be life
    # threatening...
    - if:
        - condition: state
          entity_id: group.family
          state: home
        - condition: or
          conditions:
            - condition: state
              entity_id: script.lights_out
              state: "on"
            - condition: state
              entity_id: timer.everyone_asleep_delay
              state: active
            - condition: state
              entity_id: input_boolean.everyone_asleep
              state: "on"
      then:
        # Short alarm siren pulses for 2 minutes
        - service: script.turn_on
          target:
            entity_id: script.sirens
          data:
            variables:
              mode: pulse
              ontime: 120
      # Otherwise, directly release the queued up TTS announcement
      else:
        - delay: 2 # Slight delay to ensure the queue properly "registered"
        - event: tts_announce
          event_data:
            tag: calamity
    # Finally, send a notification â€“ this also serves to block the automation
    # from running again while the notification is up
    - service: script.persistent_notification
      data:
        group: calamity
        channel: Alert
        criticalNotification: true
        title: ðŸš¬ High PM level detected!
        message: >-
          PM2.5 in the <strong>{{ area_name(trigger.entity_id) }}</strong> is
          above <strong>{{ trigger.above }} Âµg/mÂ³</strong>!
          <br><br>
          There might be a fire somewhere inside or nearby the house!
  mode: single
  max_exceeded: silent
