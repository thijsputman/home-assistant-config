- alias: ðŸ¤¯/ðŸ”¥ | ðŸ“±/ðŸ”Š Smoke detected
  id: 1166dfdf-0375-4834-aa52-188c78d3bbdd
  trigger:
    - platform: state
      # Explicitly trigger on individual sensors so it's (easier) to reference
      # the one that triggered in the announcement...
      entity_id:
        - binary_sensor.fire_81 # Upstairs
        - binary_sensor.fire_187 # Attic
        - binary_sensor.fire_188 # Hallway
        - binary_sensor.fire_190 # Shed
      from: "off"
      to: "on"
  condition: []
  action:
    - service: script.turn_on
      target:
        entity_id: script.sms_notification
      data:
        variables:
          message: >-
            ðŸ”¥ Smoke detected!\n
            {{ state_attr(trigger.entity_id, 'friendly_name') }} detected
            smoke!
    # Queue TTS announcement (released when silencing the sirens)
    - service: script.turn_on
      target:
        entity_id: script.tts_queue
      data:
        variables:
          channel: announce
          tag: calamity
          priority: attention
          expiry: "00:10:00"
          message: >-
            {{ state_attr(trigger.entity_id, 'friendly_name') }} detected
            smoke!
    - parallel:
        # During the day, release the queued up TTS announcement right away
        - if:
            - condition: state
              entity_id: script.lights_out
              state: "off"
            - condition: state
              entity_id: timer.everyone_asleep_delay
              state: idle
            - condition: state
              entity_id: input_boolean.everyone_asleep
              state: "off"
          then:
            # Slightly delay the announcement so the initial "shock" of the
            # sirens sounding has passed...
            - delay: 10
            - event: tts_announce
              event_data:
                tag: calamity
        # Explicitly block any further runs of this automation while the
        # notification is up
        - service: script.persistent_notification
          data:
            group: calamity
            channel: Critical
            importance: high
            criticalNotification: true
            title: ðŸ”¥ Smoke detected!
            message: >-
              {{ state_attr(trigger.entity_id, 'friendly_name') }} detected
              smoke!
  mode: single
  max_exceeded: silent
- alias: >-
    ðŸ¤¯/ðŸ”¥ | ðŸš¨ Smoke detected inside the house
    (activate sirens unconditionally)
  id: 3e33958b-6f90-4612-afd0-d0078e054e92
  trigger:
    - platform: state
      entity_id: binary_sensor.smoke_detectors_inside
      from: "off"
      to: "on"
      # Hold state for 1 minute so we don't raise hell on a false alarm...
      for: "00:01:00"
  condition: []
  # Sound the alarm for 5 minutes (the maximum duration) or until the smoke
  # detector(s) clear(s). The goal is to draw as much attention as possible
  # regardless of whether someone is home â€“ the neighbours might notice and call
  # the Fire department.
  action:
    - service: script.turn_on
      target:
        entity_id: script.sirens
      data:
        variables:
          mode: lselect
          ontime: 300
    - wait_for_trigger:
        - platform: state
          entity_id: binary_sensor.smoke_detectors_inside
          from: "on"
          to: "off"
      # No need to bother beyond the 5-minute maximum duration
      timeout: 300
      continue_on_timeout: false
    - condition: state
      entity_id: script.sirens
      state: "on"
    - service: script.sirens
      data:
        mode: none
  mode: single
- alias: >-
    ðŸ¤¯/ðŸ”¥ | ðŸš¨ Smoke detected in the Shed
    (activate sirens when Â«Everyone [at home] asleepÂ»)
  id: b8053440-9701-4109-bc47-fdf6d37dc498
  trigger:
    - platform: state
      entity_id: binary_sensor.fire_190
      from: "off"
      to: "on"
      for: "00:01:00"
  condition:
    - condition: state
      entity_id: group.family
      state: home
    - condition: or
      conditions:
        - condition: state
          entity_id: script.lights_out
          state: "on"
        - condition: state
          entity_id: timer.everyone_asleep_delay
          state: active
        - condition: state
          entity_id: input_boolean.everyone_asleep
          state: "on"
  action:
    - service: script.turn_on
      target:
        entity_id: script.sirens
      data:
        variables:
          mode: lselect
          ontime: 300
    - wait_for_trigger:
        - platform: state
          entity_id: binary_sensor.fire_190
          from: "on"
          to: "off"
      timeout: 300
      continue_on_timeout: false
    - condition: state
      entity_id: script.sirens
      state: "on"
    - service: script.sirens
      data:
        mode: none
  mode: single
