- alias: 🤯 | 🕹️ Silence the sirens (Bedroom Smart Switches)
  id: 3ee7611d-1a32-46ee-83ca-a8506f771fa2
  trigger:
    # Regular press
    - device_id: da1237666189a9a364fa383795ba532d
      domain: deconz
      platform: device
      type: remote_button_short_press
      subtype: turn_on
    - device_id: b26003b4b78afd0e5b2c3bcb3b06eeeb
      domain: deconz
      platform: device
      type: remote_button_short_press
      subtype: turn_on
    # Double-press
    - device_id: da1237666189a9a364fa383795ba532d
      domain: deconz
      platform: device
      type: remote_button_double_press
      subtype: turn_on
    - device_id: b26003b4b78afd0e5b2c3bcb3b06eeeb
      domain: deconz
      platform: device
      type: remote_button_double_press
      subtype: turn_on
  condition:
    # Stay out of Home Alarm's territory (see "📄 alarm/silence.yaml")
    - condition: not
      conditions:
        - condition: state
          entity_id: alarm_control_panel.home_alarm
          state: triggered
    - condition: state
      entity_id: script.sirens
      state: "on"
    - condition: state
      entity_id: group.family
      state: home
  action:
    - service: scene.turn_on
      target:
        entity_id: scene.bedroom_concentrate
    # Wait 10 seconds before listening for a _second_ press. This is to prevent
    # us from simply switching of the noise and going back to sleep...
    - delay: "00:00:10"
    - wait_for_trigger:
        # Regular press
        - device_id: da1237666189a9a364fa383795ba532d
          domain: deconz
          platform: device
          type: remote_button_short_press
          subtype: turn_on
        - device_id: b26003b4b78afd0e5b2c3bcb3b06eeeb
          domain: deconz
          platform: device
          type: remote_button_short_press
          subtype: turn_on
        # Double-press
        - device_id: da1237666189a9a364fa383795ba532d
          domain: deconz
          platform: device
          type: remote_button_double_press
          subtype: turn_on
        - device_id: b26003b4b78afd0e5b2c3bcb3b06eeeb
          domain: deconz
          platform: device
          type: remote_button_double_press
          subtype: turn_on
      # The sirens stop after (at most) 5 minutes; safe to abort at that time
      timeout: 300
      continue_on_timeout: false
    - service: script.sirens
      data:
        mode: none
    - event: tts_announce
      event_data:
        speaker: media_player.pi0_w2_speaker_bedroom
        tag: calamity
  mode: single
  max_exceeded: silent
- alias: 🤯/💧 | 📱 Send notification (water detected)
  id: e604c349-9733-4d0c-bb6f-199dd62f1004
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.water_59
        - binary_sensor.water_82
      from: "off"
      to: "on"
  condition: []
  action:
    # Don't block on the SMS notification
    - service: script.turn_on
      target:
        entity_id: script.sms_notification
      data:
        variables:
          message: >-
            💧 Leak detected!
            \n{{ trigger.to_state.attributes.friendly_name }} detected water!
    # Explicitly block any further runs of this automation while the
    # notification is up (i.e. once a notification is up, no additional
    # notifications are raised)
    - service: script.persistent_notification
      data:
        group: calamity
        channel: Alert
        criticalNotification: true
        title: 💧 Leak detected!
        message: >-
          {{ trigger.to_state.attributes.friendly_name }} detected water!
  mode: single
  max_exceeded: silent
- alias: 🤯/💧 | 🚨/🔊 Sound the alarm (water detected when someone home)
  id: 761dc98c-6444-4782-8295-26dd8caaad59
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.water_59
        - binary_sensor.water_82
      from: "off"
      to: "on"
      for: "00:01:00"
  condition:
    - condition: state
      entity_id: group.family
      state: home
  action:
    # Short alarm siren pulses for 2 minutes
    - service: script.turn_on
      target:
        entity_id: script.sirens
      data:
        variables:
          mode: pulse
          ontime: 120
    # Queue TTS announcement (released when silencing the sirens at night)
    - service: script.turn_on
      target:
        entity_id: script.tts_queue
      data:
        variables:
          channel: announce
          tag: calamity
          priority: attention
          expiry: "00:10:00"
          message: >-
            PM 2.5 in the {{ area_name(trigger.entity_id) }} is above
            {{ trigger.above }} microgram per cubic meter!
    # During the day, release the queued up TTS announcement right away
    - delay: 5 # Release after the first siren "pulse"
    - if:
        - condition: state
          entity_id: input_boolean.everyone_asleep
          state: "off"
      then:
        - event: tts_announce
          event_data:
            tag: calamity
    - wait_for_trigger:
        - platform: state
          entity_id:
            - binary_sensor.water_59
            - binary_sensor.water_82
          from: "on"
          to: "off"
      # No need to bother once the sirens are off
      timeout: 120
      continue_on_timeout: false
    # Only silence the sirens if _both_ sensors are clear – this might cause
    # the automation to end prematurely, but better to err on the side of
    # caution in this case...
    - condition: state
      entity_id:
        - binary_sensor.water_59
        - binary_sensor.water_82
      state: "off"
    - event: tts_queue_abort
      event_data:
        tag: calamity
    - condition: state
      entity_id: script.sirens
      state: "on"
    - service: script.sirens
      data:
        mode: none
  mode: single
- alias: 🤯/🔥 | 📱 Send notification (smoke detected)
  id: 1166dfdf-0375-4834-aa52-188c78d3bbdd
  trigger:
    - platform: state
      entity_id: binary_sensor.fire_81
      from: "off"
      to: "on"
  condition: []
  action:
    # Don't block on the SMS notification
    - service: script.turn_on
      target:
        entity_id: script.sms_notification
      data:
        variables:
          message: >-
            🔥 Smoke detected!
            \n{{ state_attr(trigger.entity_id, 'friendly_name') }}
            detected smoke!
    # Explicitly block any further runs of this automation while the
    # notification is up
    - service: script.persistent_notification
      data:
        group: calamity
        channel: Critical
        importance: high
        criticalNotification: true
        title: 🔥 Smoke detected!
        message: >-
          {{ state_attr(trigger.entity_id, 'friendly_name') }} detected smoke!
  mode: single
  max_exceeded: silent
- alias: 🤯/🔥 | 🚨/🔊 Sound the alarm (smoke detected)
  id: 3e33958b-6f90-4612-afd0-d0078e054e92
  trigger:
    - platform: state
      entity_id: binary_sensor.fire_81
      from: "off"
      to: "on"
      # Hold state for 1 minute so we don't raise hell on a false alarm...
      for: "00:01:00"
  condition: []
  # Sound the alarm for 5 minutes (the maximum duration) or until the smoke
  # detector clears. The goal is to draw as much attention as possible
  # regardless of whether someone is home – the neighbours might notice and call
  # the Fire department. If after 5 minutes the alarm is still sounding, it has
  # probably outlived its usefulness...
  action:
    - service: script.turn_on
      target:
        entity_id: script.sirens
      data:
        variables:
          mode: lselect
          ontime: 300
    # Queue TTS announcement (released when silencing the sirens at night)
    - service: script.turn_on
      target:
        entity_id: script.tts_queue
      data:
        variables:
          channel: announce
          tag: calamity
          priority: attention
          expiry: "00:10:00"
          message: >-
            {{ state_attr(trigger.entity_id, 'friendly_name') }} detected smoke!
    # During the day, release the queued up TTS announcement right away
    - delay: 2 # Slight delay to ensure the queue properly "registered"
    - if:
        - condition: state
          entity_id: input_boolean.everyone_asleep
          state: "off"
      then:
        - event: tts_announce
          event_data:
            tag: calamity
    - wait_for_trigger:
        - platform: state
          entity_id: binary_sensor.fire_81
          from: "on"
          to: "off"
      # No need to bother once the sirens are off
      timeout: 300
      continue_on_timeout: false
    - event: tts_queue_abort
      event_data:
        tag: calamity
    - condition: state
      entity_id: script.sirens
      state: "on"
    - service: script.sirens
      data:
        mode: none
  mode: single
