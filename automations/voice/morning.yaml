- alias: >-
    🔊 | 🕹️ Trigger "Good morning!" announcements (wakeup alarm snoozed
    or silenced)
  id: 5cfff24f-e0c7-422a-a181-9836432e1cf4
  trigger:
    - platform: event
      event_type: timer.started
      event_data:
        entity_id: timer.wakeup_snooze_time
    - platform: event
      event_type: wakeup_alarm_silenced
  action:
    # Slight delay both for "ergonomic" reasons and to allow other automations
    # to queue up their TTS announcements
    - delay: 5
    - event: tts_announce
      event_data:
        speaker: media_player.pi0_w2_speaker_bedroom
        tag: good_morning
- alias: 🔊 | 💤 Queue "Good morning!" (everyone awake)
  id: f1a0a203-6d0e-4c91-99a8-ced118c4c478
  trigger:
    - platform: state
      entity_id: input_boolean.everyone_asleep
      from: "on"
      to: "off"
  action:
    - service: script.turn_on
      target:
        entity_id: script.tts_queue
      data:
        variables:
          channel: announce
          tag: good_morning
          expiry: "01:00:00"
          message: Good morning!
  mode: single
- alias: 🔊 | 📹 Queue "Activity while armed"-announcement
  id: bd31f54a-d88e-44d0-958b-4da2eb248150
  trigger:
    - platform: state
      entity_id: input_boolean.everyone_asleep
      from: "on"
      to: "off"
  variables:
    activity_while_armed: >-
      {% from 'voice.jinja' import activity_while_armed %}
      {{ activity_while_armed() }}
  condition:
    - >-
      {{ activity_while_armed | trim != '' }}
  action:
    - delay: 1 # Ensure "Good morning!" comes first
    - service: script.turn_on
      target:
        entity_id: script.tts_queue
      data:
        variables:
          channel: announce
          tag: good_morning
          expiry: "01:00:00"
          chime: false
          message: >-
            While you were asleep, {{ activity_while_armed }}.
  mode: single
# N.B. Another automation is responsible for (potentially) changing the «wakeup»
# time to be ahead of appointments in the morning
- alias: 🔊 | 📅 Queue calendar announcement (calendar-event)
  id: b52670b7-b0a8-4fc8-bed2-6145f2197976
  trigger:
    - platform: calendar
      event: start
      entity_id: calendar.home
      offset: -01:00:00
  condition:
    # Ignore all-day appointments
    - >-
      {{ trigger.calendar_event.all_day is false }}
    # A valid "tts_actor" should be provided in the description's JSON payload
    - >-
      {% set description = trigger.calendar_event.description %}
      {{
        description is defined and
        description | trim != '' and
        description | trim | first == '{' and
        (description | from_json).tts_actor is defined
      }}
    # Only relevant if the appointment is within an hour _after_ «wakeup» time
    # (note the one-hour negative offset for the above calendar trigger; also
    # note this breaks down for appointments scheduled between 00:00 and 01:00)
    - >-
      {{
        today_at(states('input_datetime.wakeup')) -
          timedelta(hours = 1) <= now() and
        today_at(states('input_datetime.wakeup')) >= now ()
      }}
  action:
    - delay: 1 # Ensure "Good morning!" comes first
    - service: script.turn_on
      target:
        entity_id: script.tts_queue
      data:
        variables:
          channel: announce
          tag: good_morning
          chime: false
          expiry: >-
            {{
              [0,
                trigger.calendar_event.start | as_timestamp
                  - now() | as_timestamp
              ] | max
            }}
          message: >-
            {{ (trigger.calendar_event.description | from_json).tts_actor }}
            to arrive at {{
              trigger.calendar_event.start | as_timestamp |
                timestamp_custom('%H:%M')
            }}. That is %WAIT_REMAINING%
  mode: queued
- alias: 🔊 | ⛅ Queue today's weather forecast
  id: c74b7fa1-eb7d-46d7-ba62-7186e2c5cc32
  trigger:
    - platform: state
      entity_id: input_boolean.everyone_asleep
      from: "on"
      to: "off"
  condition: []
  action:
    - delay: 3 # Queue this one up last
    - service: weather.get_forecast
      data:
        type: daily
      target:
        entity_id: weather.tomorrow_io
      response_variable: weather
    - condition: template
      value_template: >-
        {{ weather.forecast | length > 0 }}
    - service: script.turn_on
      target:
        entity_id: script.tts_queue
      data:
        variables:
          channel: announce
          tag: good_morning
          expiry: "01:00:00"
          chime: false
          message: >-
            The forecast for today is {{
              weather.forecast[0].condition |
                replace('partlycloudy', 'partly cloudy') |
                replace('cloudy-', 'cloudy with ') |
                replace('snowy-rainy', 'wet snow') |
                replace('-', ' ') }}
            with a high of {{
              weather.forecast[0].temperature | int(0)
            }} degrees and a low of {{
              weather.forecast[0].templow | int(0)
            }} degrees.
    - if:
        - >-
          {{
            weather.forecast[0].precipitation | float(0) > 0
          }}
        # No sense in reporting rain if the main forecast mentions it...
        - >-
          {{
            weather.forecast[0].condition is not search('snow|rain')
          }}
      then:
        - service: script.turn_on
          target:
            entity_id: script.tts_queue
          data:
            variables:
              channel: announce
              tag: good_morning
              expiry: "01:00:00"
              chime: false
              message: >-
                {%
                  set precipitation =
                    weather.forecast[0].precipitation | float(0)
                %}
                {% if precipitation <= 0.5 %}
                  There is a slight chance of rain.
                {% elif precipitation <= 2.0 %}
                  Some rain is expected.
                {% else %}
                  It will likely rain.
                {% endif %}
  mode: single
