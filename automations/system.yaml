- alias: ðŸ“± Sensor low battery notification (ðŸ”‹ < 20%)
  id: bf5935e5-b716-4bfd-8949-71b01b4f484f
  variables:
    # Exclude mobile devices
    exclude:
      - sensor.p20hd_eea_battery_level
      - sensor.sm_g930f_battery_level
      - sensor.gm1913_battery_level
    # Courtesy of https://gist.github.com/sbyx/1f6f434f0903b872b84c4302637d0890
    sensors: >-
      {% set result = namespace(sensors=[]) %}
      {% for state in states.sensor |
          selectattr('attributes.device_class', '==', 'battery') %}
        {% if not state.entity_id in exclude and state.state | int(100) < 20 %}
            {% set result.sensors = result.sensors +
              [state.name ~ ': ' ~ state.state ~ '%'] %}
        {% endif %}
      {% endfor %}
      {{ result.sensors | join('</li><li>') }}
  trigger:
    - platform: time
      at: "10:00:00"
  condition:
    # Only on Saturday if there are battery-levels below 20%
    - condition: template
      value_template: >-
        {{ now().isoweekday() == 6 and sensors != '' }}
  action:
    - service: script.turn_on
      target:
        entity_id: script.persistent_notification
      data:
        variables:
          group: general
          channel: Notification
          targetDevices: my
          title: ðŸ”‹ Low sensor battery
          message: >-
            <ul><li>{{sensors}}</li><ul>
  mode: single
- alias: ðŸ“± Notify on integration failure (unknown/unavailable-state)
  id: 4c3d9da3-51c8-4881-9df0-8dec257d6d12
  description: ""
  variables:
    # Entities that require Internet-connectivity to function
    online:
      - !secret tado_ib1_connection_state
      - !secret aarlo_connected_sensor
      - vacuum.neato_d7
      - switch.pi_hole
  trigger:
    - platform: state
      entity_id:
        - sensor.power_consumption
        - sensor.weewx_outside_temperature
        - sensor.weewx_outside_temperature_balcony
        - light.range_extender_2 # deCONZ
        - sensor.hue_dimmer_switch_1_battery_level
        - !secret tado_ib1_connection_state
        - climate.tado_smart_thermostat
        - !secret aarlo_connected_sensor
        - vacuum.neato_d7
        - switch.pi_hole
        - binary_sensor.ds1815_security_status
      to:
        - unknown
        - unavailable
      for: "00:10:00"
    # Gas consumption updates once per hour
    - platform: state
      entity_id: sensor.gas_consumption
      to:
        - unknown
        - unavailable
      for: "01:00:00"
  condition:
    # We should either be online (i.e. the Remote UI is connected), or the entity
    # in question should _not_ require Internet-connectivity to function
    - condition: or
      conditions:
        - condition: state
          entity_id: binary_sensor.remote_ui
          state: "on"
        - condition: template
          value_template: >-
            {{ not trigger.entity_id in online }}
  action:
    - service: script.turn_on
      target:
        entity_id: script.persistent_notification
      data:
        variables:
          group: general
          channel: Notification
          targetDevices: my
          title: ðŸ’¥ Potential integration failure
          message: >-
            {{ trigger.to_state.attributes.friendly_name }} has been in an
            {{ trigger.to_state.state }}-state for
            {{ relative_time(trigger.to_state.last_changed) }}.
  mode: single
# The Recorder's SQLite-database is on a separate NVMe USB-drive that â€“ although
# generally stable â€“ occasionally disconnects. It reconnects right away and the
# filesystem is automatically remounted, but Docker doesn't take very kindly to
# this: All containers using the volume need to be stopped and only then (once
# they're all down) restarted for the volume to become accessible again...
# The Raspberry Pi 4 is quite picky where it comes to its USB-drives: The one
# I'm currently using has historically been stable (not 100% though, which is
# why it's not the boot-volume). Recently I've discovered that â€“ given the right
# atmospheric conditions â€“ touching it causes a static shock which reconnects
# the drive... âš¡
- alias: ðŸ“± Notify on Recorder-component failure (System Log)
  id: 28b00ed1-a3b0-4d7f-97bc-b1faf3b446d1
  trigger:
    platform: event
    event_type: system_log_event
    event_data:
      level: ERROR
      name: homeassistant.components.recorder
  condition: []
  action:
    # Explicitly block any further runs of this automation while the
    # notification is up (i.e. once a notification is up, no additional
    # notifications are raised)
    - service: script.persistent_notification
      data:
        group: general
        channel: Alert
        targetDevices: my
        criticalNotification: true
        title: ðŸ’½ Recorder-component failure!
        message: >-
          The recorder-component failed with the folllowing error:
          <br><br>
          {{ trigger.event.data.message }}
  mode: single
  max_exceeded: silent
# To prevent trigger-based template sensors from ending up in an "unknown"
# state after reloading the "Template Entities" configuration, fire a
# "template_reloaded" event shortly after this happens so that these sensors
# can trigger to update themselves
- alias: ðŸš§ Trigger template_reloaded-event ("Template Entities" configuration reloaded)
  id: bc006b3a-0ea9-4596-9521-b6424a986872
  trigger:
    - platform: event
      event_type: call_service
      event_data:
        domain: template
        service: reload
  condition: []
  action:
    - delay: 30
    - event: template_reloaded
  mode: restart
