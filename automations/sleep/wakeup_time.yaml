- alias: Set next «wakeup» time
  id: 01d828d8-da3e-432c-8beb-0f20392d2f8e
  triggers:
    - trigger: time
      at: input_datetime.wakeup
  conditions:
    # Only trigger if there _hasn't_ been a wakeup alarm today
    - >-
      {% from 'functions.jinja' import today_wakeup_occurred %}
      {{ today_wakeup_occurred() }}
  actions:
    # Updating `input_datetime.last_wakeup ` is delayed by 10-seconds to ensure
    # it doesn't interfere with the other automations running at «wakeup» time
    # (and thus unintentionally prevents them from running).
    - delay: "00:00:10"
    - action: input_datetime.set_datetime
      data:
        datetime: >-
          {{
            now() | as_timestamp |
              timestamp_custom('%Y-%m-%d %H:%M:%S', true)
          }}
      entity_id: input_datetime.last_wakeup
    - choose:
        - conditions:
            - condition: time
              weekday: [fri, sat] # yamllint disable-line rule:brackets
          sequence:
            - action: input_datetime.set_datetime
              data:
                time: "09:00:00"
              entity_id: input_datetime.wakeup
        - conditions:
            - condition: time
              # yamllint disable-line rule:brackets
              weekday: [sun, mon, tue, wed, thu]
          sequence:
            - action: input_datetime.set_datetime
              data:
                time: "08:00:00"
              entity_id: input_datetime.wakeup
    # Unmute the wakeup alarm
    - action: input_boolean.turn_off
      data:
        entity_id: input_boolean.wakeup_alarm_mute
  mode: single
- alias: Prepone «wakeup» time
  id: 2a7fa567-68f3-4327-9818-1bfe8a7c3e70
  triggers:
    - trigger: calendar
      event: start
      entity_id: calendar.home
      # Update the «wakeup» time well before we go to sleep (so it's visible on
      # the dashboard when we do), and (hopefully) well _after_ today's wakeup
      # alarm...
      offset: "-12:00:00"
  conditions:
    # Ignore all-day appointments
    - >-
      {{ trigger.calendar_event.all_day is false }}
    # As an extra backstop, ensure we're running _after_ the current «wakeup»
    # time (to prevent unintentionally changing today's wakeup alarm)
    - >-
      {{ today_at(states('input_datetime.wakeup')) < now()}}
  actions:
    # Act if the appointment starts _within_ 30 minutes of the current «wakeup»
    # time; accounting for the fact «wakeup» time is dateless and we thus have
    # to explicitly do a comparison for today and tomorrow
    - if: >-
        {% set appointment = trigger.calendar_event.start | as_datetime %}
        {% set wakeup = today_at(states('input_datetime.wakeup')) %}
        {{
          (
            appointment.day == now().day and
              wakeup - appointment > timedelta(minutes = -30)
          ) or (
            appointment.day == (now() + timedelta(days=1)).day and
              (wakeup + timedelta(days=1)) - appointment >
                timedelta(minutes = -30)
          )
        }}
      then:
        - action: input_datetime.set_datetime
          data:
            # Set «wakeup» time to 30-minutes _before_ the appointment
            datetime: >-
              {{
                trigger.calendar_event.start |
                  as_datetime - timedelta(minutes = 30)
              }}
          target:
            entity_id: input_datetime.wakeup
  mode: queued
