persistent_notification:
  alias: Persistent notification
  description: >-
    Create a persistent notification on both mobile devices and in the Lovelace
    UI. Dismiss on mobile device dismisses in Lovelace; optionally the other way
    way around too.
  icon: mdi:message-outline
  fields:
    targetDevices:
      description: Mobile device(s) to target
      required: false
      default: all
      selector:
        select:
          options:
            - all # All devices
            - home # All devices currently at home
            - my # Only my personal device(s)
    title:
      required: false
      selector:
        text: # yamllint disable-line rule:empty-values
    message:
      required: true
      selector:
        text:
          multiline: true
    tag:
      description: Replaces existing notification with the same tag
      required: false
      selector:
        text: # yamllint disable-line rule:empty-values
    # Optional notification actions (next to the always-present "Dismiss"-
    # action). To act on these, a custom [tag] needs to be provided as the
    # actions will be "ACTION_1_[tag]" and "ACTION_2_[tag]" respectively.
    # There's one exceptional case: If both "action_1" and "uri_1" are provided,
    # the first action will open the provided URI on the phone. In this case
    # (for Android-compatibility), the action is hardcoded to "URI" and can thus
    # not be acted upon on the Home Assistant side...
    action_1:
      description: Mobile devices â€“ First notification action
      required: false
      selector:
        text: # yamllint disable-line rule:empty-values
    uri_1:
      description: Mobile devices â€“ URI for first notification action
      required: false
      selector:
        text:
          type: url
    action_2:
      description: Mobile devices â€“ Second notification action
      required: false
      selector:
        text: # yamllint disable-line rule:empty-values
    group:
      description: Mobile devices â€“ Grouping/threading of notifications
      required: false
      selector:
        text: # yamllint disable-line rule:empty-values
    channel:
      description: Mobile devices â€“ Notification channel
      required: false
      default: General
      selector:
        select:
          options:
            - Critical
            - Alert
            - Notification
            - Reminder
            - General
    importance:
      description: Mobile devices â€“ Notification channel importance
      required: false
      default: default
      selector:
        select:
          options:
            - high
            - low
            - min
            - default
    image:
      required: false
      selector:
        text: # yamllint disable-line rule:empty-values
    lovelaceDismiss:
      description: >-
        Allow mobile device notification to be dismissed from Lovelace
      required: false
      default: true
      selector:
        boolean: # yamllint disable-line rule:empty-values
    criticalNotification:
      description: >-
        Send "critical notification" (priority high; TTL 0) to the mobile
        device(s)
      required: false
      default: false
      selector:
        boolean: # yamllint disable-line rule:empty-values
  variables:
    # The below does not scale well beyond two devices... Also, when changing
    # phones in the below script, don't forget to update the "All devices"
    # notify group in "ðŸ“„ ./configuration.yaml"!
    targetService: >-
      {% if targetDevices in ['home', 'my'] %}
        {% if targetDevices == 'my' %}
          notify.mobile_app_pixel_9_pro
        {% elif targetDevices == 'home' %}
          {%
            if is_state('device_tracker.pixel_9_pro_unifi', 'home') and
              is_state('device_tracker.samsung_s21_fe', 'home')
          %}
            notify.all_devices
          {% elif is_state('device_tracker.pixel_9_pro_unifi', 'home') %}
            notify.mobile_app_pixel_9_pro
          {% elif is_state('device_tracker.samsung_s21_fe', 'home') %}
            notify.mobile_app_sm_g990b2
          {% endif %}
        {% endif %}
      {% else %}
        notify.all_devices
      {% endif %}
    # Remove all stray whitespaces left due to Jinja and YAML formatting â€“ it's
    # much easier to do this here, than to try and properly format/indent the
    # messages in the YAML-files themselves...
    lovelaceMessage: >-
      {{
        message |
        regex_replace('[ \n]+', ' ') |
        replace(' .', '.') |
        trim
      }}
      {%- if image is defined -%}
        <br><br>![embedded image]({{ image }})
      {%- endif -%}
    lovelaceDismiss: >-
      {% if lovelaceDismiss is not boolean %}
        {{ true }}
      {% else %}
        {{ lovelaceDismiss }}
      {% endif %}
    ttl: >-
      {% if criticalNotification is true %}
        0
      {% endif %}
    priority: >-
      {% if criticalNotification is true %}
        high
      {% endif %}
  sequence:
    - variables:
        # Used as both "tag" (for mobile devices) and "notification_id" (for
        # Lovelace persistent notifications)
        tag: >-
          {% if tag is undefined %}
            TAG_{{ context.id }}
          {% else %}
            {{ tag }}
          {% endif %}
    # Abort if targetDevices is "home" and no devices are at home
    - condition: template
      value_template: >-
        {{
          targetDevices != 'home' or (
            targetDevices == 'home' and (
              is_state('device_tracker.samsung_s21_fe', 'home') or
              is_state('device_tracker.pixel_9_pro_unifi', 'home')
            )
          )
        }}
    - service: >-
        {{ targetService }}
      data:
        title: >-
          {% if title is defined %}
            {{ title }}
          {% endif %}
        message: >-
          {{
            message |
            regex_replace('[ \n]+', ' ') |
            replace(' .', '.') |
            trim
          }}
        data:
          tag: >-
            {{ tag }}
          group: >-
            {% if group is defined %}
              {{ group }}
            {% endif %}
          channel: >-
            {% if channel in ['Critical', 'Alert', 'Notification', 'Reminder'] %}
              {{ channel }}
            {% endif %}
          importance: >-
            {% if importance in ['high', 'low', 'min'] %}
              {{ importance }}
            {% endif %}
          clickAction: lovelace-home
          image: >-
            {% if image is defined %}
              {{ image }}
            {% endif %}
          ttl: >-
            {{ ttl }}
          priority: >-
            {{ priority }}
          sticky: "true"
          actions:
            - action: >-
                DISMISS_{{ context.id }}
              title: Dismiss
            - action: >-
                {% if action_1 is defined %}
                  {% if uri_1 is defined %}
                    URI
                  {% else %}
                    ACTION_1_{{ tag }}
                  {% endif %}
                {% endif %}
              title: >-
                {% if action_1 is defined %}
                  {{ action_1 }}
                {% endif %}
              uri: >-
                {% if uri_1 is defined %}
                  {{ uri_1 }}
                {% endif %}
            - action: >-
                {% if action_2 is defined %}
                  ACTION_2_{{ tag }}
                {% endif %}
              title: >-
                {% if action_2 is defined %}
                  {{ action_2 }}
                {% endif %}
    - service: persistent_notification.create
      data:
        title: >-
          {% if title is defined %}
            {{ title }}
          {% endif %}
        message: >-
          {{ lovelaceMessage }}
        notification_id: >-
          {{ tag }}
    # Wait for notification actions to occur (up to 24 hours)
    - wait_for_trigger:
        # Dismissed from mobile device
        - platform: event
          id: dismiss
          event_type: mobile_app_notification_action
          event_data:
            action: >-
              DISMISS_{{ context.id }}
        # The (optional) action buttons also dismiss the notification
        - platform: event
          id: action_1
          event_type: mobile_app_notification_action
          event_data:
            action: >-
              ACTION_1_{{ tag }}
        - platform: event
          id: action_2
          event_type: mobile_app_notification_action
          event_data:
            action: >-
              ACTION_2_{{ tag }}
        # Dismissed from Lovelace
        - platform: event
          id: lovelace_dismiss
          event_type: call_service
          event_data:
            domain: persistent_notification
            service: dismiss
            service_data:
              # When lovelaceDismiss is disabled, this event should _never_
              # trigger: It would end script execution and thus prevent the
              # "mobile_app_notification_action"-trigger from firing and
              # actually dismissing the notification on mobile.
              notification_id: >-
                {% if lovelaceDismiss is true %}
                  {{ tag }}
                {% else %}
                  {{ tag }}_NO_DISMISS
                {% endif %}
        # Another persistent notification with the same notification ID (i.e.
        # tag) was created. End this run to prevent running out of parellel
        # executions; the new script run takes over management of this
        # notification ID's actions.
        - platform: event
          id: noop
          event_type: call_service
          event_data:
            domain: persistent_notification
            service: create
            service_data:
              notification_id: >-
                {{ tag }}
      timeout: "24:00:00"
      continue_on_timeout: false
    - choose:
        # Dismissed from mobile device (either via "Dismiss" or one of the
        # optional action buttons)
        - conditions: >-
            {{
              wait.trigger is not none and
              wait.trigger.id in ['dismiss', 'action_1', 'action_2']
            }}
          sequence:
            # Remove persistent notification from Lovelace
            - service: persistent_notification.dismiss
              data:
                notification_id: >-
                  {{ tag }}
            # Notification is "sticky" on mobile, so we need to explicitly
            # dismiss it from the mobile device(s) too...
            - service: >-
                {{ targetService }}
              data:
                message: clear_notification
                data:
                  tag: >-
                    {{ tag }}
        # Dismissed from Lovelace (only fired when lovelaceDismiss is enabled)
        - conditions: >-
            {{
              wait.trigger is not none and
              wait.trigger.id == 'lovelace_dismiss'
            }}
          sequence:
            # Dismiss notification from mobile device(s)
            - service: >-
                {{ targetService }}
              data:
                message: clear_notification
                data:
                  tag: >-
                    {{ tag }}
  mode: parallel
  max: 50
sms_notification:
  alias: SMS notification
  description: >-
    Send an SMS notification to one or more mobile numbers.
  icon: mdi:cellphone-message
  fields:
    targetDevices:
      description: Predefined groups of mobile numbers to target
      required: false
      default: all
      selector:
        select:
          options:
            - all # All devices
            - my # Only my personal device(s)
    phoneNumber:
      description: >-
        Send to the provided phone number instead (overrides targetDevices).
        Only accepts Dutch mobile phone numbers.
      required: false
      selector:
        text: # yamllint disable-line rule:empty-values
    message:
      description: >-
        To insert newlines into the message, use a "\n" string literal (actual
        newlines are removed prior to sending).
      required: true
      selector:
        text:
          multiline: true
  variables:
    numbers_all: !secret gammu_numbers_all
    numbers_my: !secret gammu_numbers_my
    numbers: >-
      {% if phoneNumber is defined %}
        {# Dutch mobile phone numbers #}
        {% if phoneNumber is search('^<\+316[0-9]{8}>$') %}
          {{
            [ phoneNumber | regex_findall_index('^<(\+316[0-9]{8})>$') ]
          }}
        {% else %}
          {{ [] }}
        {% endif %}
      {% elif targetDevices == 'my' %}
        {{ numbers_my }}
      {% else %}
        {{ numbers_all }}
      {% endif %}
    # Apart from the regular clean-up, for SMS messages all "\n" string literals
    # have their trailing whitespaces removed â€“ this ensures text always starts
    # at the start of a line.
    cleanMessage: >-
      {{
        message |
        regex_replace('[ \n]+', ' ') |
        replace(' .', '.') |
        regex_replace('\\\\n +', '\\\\n')
      }}
  sequence:
    - condition: template
      value_template: >-
        {{ numbers | length > 0 }}
    - service: mqtt.publish
      data:
        topic: gammu/send
        payload: >-
          {#
            There is a bit of trickery here to ensure the phone numbers survive
            intact: By concatenating with double-quotes _inside_ the Jinja
            template statement we prevent the phone number (+316...) from being
            interpreted as an integer (316...).
          #}
          {
            "number": {{ '"' ~ numbers | join(';') ~ '"' }},
            "text": "{{ cleanMessage }}"
          }
    - wait_for_trigger:
        - platform: state
          # Cannot directly check the state of the success-attribute as it is
          # most likely already/still "true" from a previous send operation...
          entity_id: sensor.gammu_sent_message
      timeout: 60
      continue_on_timeout: true
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: sensor.gammu_sent_message
                  attribute: success
                  state: false
                # If no result is received within 60 seconds, assume failure
                - condition: template
                  value_template: >-
                    {{ wait.trigger is none }}
          # For now just log the failure; I'm not sure how useful it is to retry
          # sending the message...
          sequence:
            - service: system_log.write
              data:
                level: warning
                message: >-
                  Unable to send SMS message "{{ cleanMessage }}" to
                    {{ '"' ~ numbers | join('; ') ~ '"' }}:
                  {% if wait.trigger is none %}
                    Request timed-out after 60 seconds
                  {% else %}
                    {{ states('sensor.gammu_sent_message') }}
                  {% endif %}
  mode: queued
