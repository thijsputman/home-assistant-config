tts_queue:
  alias: TTS queue
  # The "tts_attention" and "tts_announce" events can contain the following
  # event data:
  #
  # - room: The room in which to play the TTS queue. By convention, all
  #   "tts_attention" events specify a room. Namely, room which has attention.
  #   For "tts_announce" events it depends on the context of the event (ie, some
  #   announcements might target as specific room, while others want to be
  #   announced everywhere).
  # - tag: If defined on an event, only announcements with that specific tag
  #   set are released from the queue. Mainly used to ensure multiple
  #   "tts_announce" event-streams don't get mixed.
  description: >-
    Queue a message for announcement. There are two "channels": attention and
    announce. The queue is released whenever the matching channel's event
    (either "tts_attention" or "tts_announce") is raised.
    The "attention"-channel is used to queue up (low-priority) announcements for
    broadcast at an opportune moment later in time. The "announce"-channel is
    used to queue up announcements for (near) immediate release. Functionally,
    both channels behave identical.
  icon: mdi:speaker-message
  fields:
    message:
      description: >-
        The message to queue for announcement
      required: true
      selector:
        text: # yamllint disable-line rule:empty-values
    expiry:
      description: >-
        Validity of the announcement â€“ for the "attention"-channel defaults to
        2-hours, for the "announce"-channel defaults to 5-minutes
      required: false
      default: "02:00:00"
      selector:
        time: # yamllint disable-line rule:empty-values
    channel:
      description: Message channel
      required: false
      default: attention
      selector:
        select:
          options:
            - attention
            - announce
    priority:
      description: Message priority
      required: false
      default: regular
      selector:
        select:
          options:
            - attention
            - regular
            - whisper
    tag:
      description: >-
        Announcement tag â€“ can be used to abort queued announcements _and_ in
        case of "tts_announce" events to only play announcements with a specific
        tag
      required: false
      selector:
        text: # yamllint disable-line rule:empty-values
  variables:
    channel: >-
      {% if channel not in ['attention', 'announce'] %}
        attention
      {% else %}
        {{ channel }}
      {% endif %}
    expiry: >-
      {% if expiry is not defined %}
        {% if channel == 'attention' %}
          {{ 7200 }}
        {% else %}
          {{ 300 }}
        {% endif %}
      {% else %}
        {{ expiry }}
      {% endif %}
  sequence:
    - variables:
        queued_at: >-
          {{ now() }}
    - repeat:
        sequence:
          - wait_for_trigger:
              - trigger: event
                id: attention
                event_type: tts_attention
              - trigger: event
                id: announce
                event_type: tts_announce
              - trigger: event
                id: abort
                event_type: tts_queue_abort
                event_data:
                  tag: >-
                    {% if tag is defined %}
                      {{ tag }}
                    {% else %}
                      {# For manual intervention / debugging purposes #}
                      ABORT_{{ context.id }}
                    {% endif %}
              - trigger: event
                id: abort
                event_type: tts_queue_abort_all
            # Ensure we respect the original timeout by updating it with the
            # value of "wait.remaining" after each iteration
            timeout: >-
              {% if wait is defined and wait.remaining is defined %}
                {{ wait.remaining }}
              {% else %}
                {{ expiry }}
              {% endif %}
            continue_on_timeout: false
        # Hold announcement in queue until it's aborted, or its channel (either
        # "attention" or "announce") is triggered on its preferred speaker. In
        # that case, if the event has a tag set it needs to match the
        # announcement's tag.
        until: >-
          {{
            wait.trigger.id == 'abort' or (
              wait.trigger.id == channel and
              (
                wait.trigger.event.data.tag is not defined or
                wait.trigger.event.data.tag == tag
              )
            )
          }}
    - condition: >-
        {{ wait.trigger.id in ['attention', 'announce'] }}
    # Message preprocessing â€” replace a handful of "magic markers" with their
    # actual content. Currently, the following markers are supported:
    #
    # - %TIME_AGO%: Amount of time passed since the announcement was queued (in
    #               the form of "about XX minutes ago...")
    # - %WAIT_REMAINING%: The amount of time left on the announcement's queue
    #                     (in the form of "in XX minutes...")
    - variables:
        message: >-
          {%
            from 'functions.jinja' import relative_time_tts, future_time_tts
          %}
          {{
            message |
              replace('%TIME_AGO%', relative_time_tts(
                now() | as_timestamp - queued_at | as_timestamp)
              ) |
              replace('%WAIT_REMAINING%',
                future_time_tts(wait.remaining | int(0))
              )
          }}
    - action: script.turn_on
      target:
        entity_id: script.tts_announce
      data:
        variables:
          rooms: >-
            {{
              wait.trigger.event.data.room if
                wait.trigger.event.data.room is defined else none
            }}
          message: >-
            {{ message }}
          priority: >-
            {{ priority if priority is defined else none }}
  mode: parallel
  max: 20
  trace:
    stored_traces: 20
tts_announce:
  alias: TTS announce
  description: >-
    See "TTS queue" for more details.
  icon: mdi:speaker-message
  fields:
    rooms:
      description: >-
        Rooms to announce in â€“ when omitted announces in _all_ rooms; multiple
        selection possible
      required: true
      selector:
        select:
          multiple: true
          options:
            - attic
            - bedroom
            - guestroom
            - living_room
    message:
      description: The message to announce
      required: true
      selector:
        text: # yamllint disable-line rule:empty-values
    priority:
      description: Message priority
      required: false
      default: regular
      selector:
        select:
          options:
            - attention
            - regular
            - whisper
  variables:
    satellites: >-
      {% from 'rooms.jinja' import rooms_satellites %}
      {{ rooms_satellites(rooms) }}
    speakers: >-
      {% from 'rooms.jinja' import rooms_speakers %}
      {{ rooms_speakers(rooms) }}
    preannounce_sample: >-
      {% if this.attributes.current == 0 %}
        {% if priority == 'attention' %}
          Crosswalk.ogg
        {% elif priority == 'whisper' %}
          Portal.ogg
        {% else %}
          Bubble.ogg
        {% endif %}
      {# Bridge between two consecutive announcements #}
      {% else %}
        Pollen.ogg
      {% endif %}
    volume: >-
      {% if priority == 'attention' %}
        0.90
      {% elif priority == 'whisper' %}
        0.45
      {% else %}
        0.70
      {% endif %}
  sequence:
    # Only announce when someone's home
    - condition: not
      conditions:
        - condition: state
          entity_id: alarm_control_panel.home_alarm
          state:
            - armed_away
            - armed_vacation
    # XXX Cope nicely with empty message...
    - variables:
        # Compress all whitespace; remove all HTML-tags (they are
        # pronounced, instead of being used as intonation hints as I
        # would've hoped); convert timestamps into a format slightly more
        # conductive to TTS; replace "ij" with "y" (English-language TTSs
        # trip over it â€“ also hard-coded a fix for my own name ðŸ˜‡).
        announcement: >-
          {{
            message |
              regex_replace('[ \n]+', ' ') |
              regex_replace('<.+?>', '') |
              regex_replace('0([1-9]{1}):([0-9]{2})', '\g<1>:\g<2>') |
              regex_replace('([0-9]{1,2}):0([1-9]{1})',
                '\g<2> past \g<1>') |
              regex_replace('([0-9]{1,2}):00', '\g<1> o\'clock') |
              replace('ij', 'y') | replace('Thijs', 'Tice')
          }}
    - action: media_player.volume_set
      data:
        volume_level: >-
          {{ volume }}
      target:
        entity_id: >-
          {{ speakers }}
    - action: assist_satellite.announce
      target:
        entity_id: >-
          {{ satellites }}
      data:
        message: >-
          {{ announcement }}
        preannounce: true
        preannounce_media_id: >-
          media-source://media_source/sd/audio/{{- preannounce_sample -}}
    - action: media_player.volume_set
      data:
        volume_level: 0.70
      target:
        entity_id: >-
          {{ speakers }}
    - action: notify.send_message
      target:
        entity_id: notify.log_tts_announce
      data:
        message: >-
          {{ satellites.split(',') if ',' in satellites else satellites }}:
          {{ announcement }} (ðŸ”Š {{ volume }})
  mode: queued
  max: 10
  trace:
    stored_traces: 20
play_sample:
  alias: Play sample
  icon: mdi:speaker-message
  fields:
    rooms:
      description: >-
        Rooms to play in â€“ when omitted announces in _all_ rooms; multiple
        selection possible
      required: true
      selector:
        select:
          multiple: true
          options:
            - attic
            - bedroom
            - guestroom
            - living_room
    sample:
      description: The sample to play
      required: true
      selector:
        text: # yamllint disable-line rule:empty-values
    volume:
      description: Volume to play sample at
      required: false
      default: 0.70
      selector:
        number:
          min: 0.0
          max: 1.0
          step: 0.01
  variables:
    speakers: >-
      {% from 'rooms.jinja' import rooms_speakers %}
      {{ rooms_speakers(rooms) }}
    volume: >-
      {{ volume if volume is defined else 0.70 }}
  sequence:
    # Only play when someone's home
    - condition: not
      conditions:
        - condition: state
          entity_id: alarm_control_panel.home_alarm
          state:
            - armed_away
            - armed_vacation
    - action: media_player.volume_set
      data:
        volume_level: >-
          {{ volume }}
      target:
        entity_id: >-
          {{ speakers }}
    - action: media_player.play_media
      data:
        media_content_type: music
        media_content_id: >-
          media-source://media_source/sd/audio/{{- sample -}}
        announce: true
      target:
        entity_id: >-
          {{ speakers }}
    # Block script while the sample is playing
    - wait_for_trigger:
        - trigger: template
          value_template: >-
            {{
              expand(
                speakers.split(',') if ',' in speakers else [speakers]
              ) | selectattr("state", "eq", "playing") | list | length == 0
            }}
          for: "00:00:01" # Template resolves slightly too fast...
      timeout: "00:02:00"
      continue_on_timeout: true
    - action: media_player.volume_set
      data:
        volume_level: 0.70
      target:
        entity_id: >-
          {{ speakers }}
    - action: notify.send_message
      target:
        entity_id: notify.log_tts_announce
      data:
        message: >-
          {{ speakers.split(',') if ',' in speakers else speakers }}:
          Played sample "{{- sample -}}" (ðŸ”Š {{ volume }})
  mode: queued
  max: 5
  trace:
    stored_traces: 10
