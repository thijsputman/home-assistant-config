tts_queue:
  alias: TTS queue
  # The "tts_attention" and "tts_announce" events can contain the following
  # event data:
  #
  # - speaker: The entity-id of the speaker on which to play the TTS queue. When
  #   _not_ defined, queued notifications that _don't_ specify a speaker
  #   preference are played on _all_ speakers (and all others are not released
  #   from the queue).
  #   By convention, all "tts_attention" events specify a speaker. Namely, the
  #   speaker which has attention. For "tts_announce" events it depends on the
  #   further context of the event (e.g. "Hourly Dong!" wants to be played on
  #   all speakers and thus doesn't specify one).
  # - tag: If defined on an event, only announcements with that specific tag
  #   set are released from the queue. Mainly used to ensure "tts_announce"
  #   events don't get mixed (e.g. "Hourly Dong!" wants to be played on all
  #   speakers, but shouldn't interfer with a potential simultaneous set of
  #   announcements that only wants to be played on a single speaker).
  description: >-
    Queue a message for announcement. There are two "channels": attention and
    announce. The queue is released whenever the matching channel's event
    (either "tts_attention" or "tts_announce") is raised.
    The "attention"-channel is used to queue up (low-priority) announcements for
    broadcast at an opportune moment later in time. The "announce"-channel is
    used to queue up announcements for (near) immediate release. Functionally,
    both channels behave identical.
  icon: mdi:speaker-message
  fields:
    message:
      description: >-
        The message to queue for announcement – to queue a sample instead of a
        text message, use "media-source://..." as message
      required: true
      selector:
        text: # yamllint disable-line rule:empty-values
    duration:
      description: >-
        The length (in seconds) of the spoken out announcement (when omitted,
        a crude heuristic is applied) – when providing a sample, provide the
        sample's duration here!
      required: false
      selector:
        number:
          min: 1
          max: 300
    expiry:
      description: >-
        Validity of the announcement – for the "attention"-channel defaults to
        2-hours, for the "announce"-channel defaults to 5-minutes
      required: false
      default: "02:00:00"
      selector:
        time: # yamllint disable-line rule:empty-values
    channel:
      description: Message channel
      required: false
      default: attention
      selector:
        select:
          options:
            - attention
            - announce
    priority:
      description: Message priority (ie, volume)
      required: false
      default: regular
      selector:
        select:
          options:
            - attention
            - regular
            - whisper
    chime:
      description: Chime before announcing
      required: false
      default: true
      selector:
        boolean: # yamllint disable-line rule:empty-values
    tag:
      description: >-
        Announcement tag – can be used to abort queued announcements _and_ in
        case of "tts_announce" events to only play announcements with a specific
        tag
      required: false
      selector:
        text: # yamllint disable-line rule:empty-values
    speaker:
      description: >-
        Preferred speaker-entity – first eligible speaker if not provided _or_
        all speakers in case of "tts_announce" events that don't specify a
        specific speaker
      required: false
      selector:
        entity:
          include_entities:
            - media_player.bpi_m2z
            - media_player.mpi_mq1
            - media_player.pi0_w2
  variables:
    channel: >-
      {% if channel not in ['attention', 'announce'] %}
        attention
      {% else %}
        {{ channel }}
      {% endif %}
    expiry: >-
      {% if expiry is not defined %}
        {% if channel == 'attention' %}
          {{ 7200 }}
        {% else %}
          {{ 300 }}
        {% endif %}
      {% else %}
        {{ expiry }}
      {% endif %}
  sequence:
    - variables:
        queued_at: >-
          {{ now() }}
    - repeat:
        sequence:
          - wait_for_trigger:
              - platform: event
                id: attention
                event_type: tts_attention
              - platform: event
                id: announce
                event_type: tts_announce
              - platform: event
                id: abort
                event_type: tts_queue_abort
                event_data:
                  tag: >-
                    {% if tag is defined %}
                      {{ tag }}
                    {% else %}
                      {# For manual intervention / debugging purposes #}
                      ABORT_{{ context.id }}
                    {% endif %}
              - platform: event
                id: abort
                event_type: tts_queue_abort_all
            # Ensure we respect the original timeout by updating it with the
            # value of "wait.remaining" after each iteration
            timeout: >-
              {% if wait is defined and wait.remaining is defined %}
                {{ wait.remaining }}
              {% else %}
                {{ expiry }}
              {% endif %}
            continue_on_timeout: false
        # Hold announcement in queue until it's aborted, or its channel (either
        # "attention" or "announce") is triggered on its preferred speaker. In
        # that case, if the event has a tag set it needs to match the
        # announcement's tag.
        until: >-
          {{
            wait.trigger.id == 'abort' or (
              wait.trigger.id == channel and
              (
                speaker is not defined or (
                  wait.trigger.event.data.speaker is defined and
                  wait.trigger.event.data.speaker == speaker
                )
              ) and (
                wait.trigger.event.data.tag is not defined or
                wait.trigger.event.data.tag == tag
              )
            )
          }}
    - condition: >-
        {{ wait.trigger.id in ['attention', 'announce'] }}
    # Message preprocessing — replace a handful of "magic markers" with their
    # actual content. Currently, the following markers are supported:
    #
    # - %TIME_AGO%: Amount of time passed since the announcement was queued (in
    #               the form of "about XX minutes ago...")
    # - %WAIT_REMAINING%: The amount of time left on the announcement's queue
    #                     (in the form of "in XX minutes...")
    - variables:
        message: >-
          {%
            from 'functions.jinja' import relative_time_tts, future_time_tts
          %}
          {{
            message |
              replace('%TIME_AGO%', relative_time_tts(
                now() | as_timestamp - queued_at | as_timestamp)
              ) |
              replace('%WAIT_REMAINING%',
                future_time_tts(wait.remaining | int(0))
              )
          }}
    - service: script.turn_on
      target:
        entity_id: script.tts_announce
      data:
        variables:
          speaker: >-
            {{
              wait.trigger.event.data.speaker if
                wait.trigger.event.data.speaker is defined
                else 'group.speakers_all'
             }}
          message: >-
            {{ message }}
          duration: >-
            {% if duration is number %}
              {{ duration }}
            {% endif %}
          chime: >-
            {{ chime | bool(true) if chime is defined else true }}
          priority: >-
            {{ priority if priority is defined else none }}
  mode: parallel
  max: 20
  trace:
    stored_traces: 20
tts_announce:
  alias: TTS announce
  description: >-
    See "TTS queue" for more details.
  icon: mdi:speaker-message
  fields:
    speaker:
      description: >-
        Speaker-entity to announce on – when omitted uses _all_ speakers;
        multiple selection possible
      required: true
      selector:
        entity:
          multiple: true
          include_entities:
            - media_player.bpi_m2z
            - media_player.mpi_mq1
            - media_player.pi0_w2
    message:
      description: The message to announce
      required: true
      selector:
        text: # yamllint disable-line rule:empty-values
    duration:
      required: false
      selector:
        number:
          min: 1
          max: 300
    chime:
      description: Chime before announcing
      required: false
      default: true
      selector:
        boolean: # yamllint disable-line rule:empty-values
    priority:
      description: Message priority (ie, volume)
      required: false
      default: regular
      selector:
        select:
          options:
            - attention
            - regular
            - whisper
  variables:
    speaker: >-
      {% if speaker is not defined %}
        group.speakers_all
      {% else %}
        {{ speaker }}
      {% endif %}
    is_sample: >-
      {{ message | trim is match('media-source:\/\/', True) }}
    volume: >-
      {% if priority == 'attention' %}
        0.65
      {% elif priority == 'whisper' %}
        0.25
      {% else %}
        0.45
      {% endif %}
  sequence:
    # Only announce when someone's home
    - condition: state
      entity_id: group.family
      state: home
    # Optional chime before the announcement. If multiple announcements are
    # queued, use a different chime to "bridge" the messages.
    - if: >-
        {{ chime | bool(true) if chime is defined else false }}
      then:
        - if: >-
            {{ this.attributes.current == 0 }}
          then:
            - service: script.tts_chime
              data:
                type: >-
                  {% if priority in ['attention', 'whisper'] %}
                    {{ priority }}
                  {% else %}
                    announce
                  {% endif %}
                speaker: >-
                  {{ speaker }}
          else:
            - service: script.tts_chime
              data:
                type: bridge
                speaker: >-
                  {{ speaker }}
    - service: media_player.volume_set
      data:
        volume_level: >-
          {{ volume }}
      target:
        entity_id: >-
          {{ speaker }}
    - if:
        - >-
          {{ is_sample }}
      then:
        - service: media_player.play_media
          data:
            media_content_type: music
            media_content_id: >-
              {{ message | trim }}
          target:
            entity_id: >-
              {{ speaker }}
        - service: notify.log_tts_announce
          data:
            message: >-
              {{ speaker.split(',') if ',' in speaker else speaker }}:
              Played sample "{{ message | trim }}" (🔊 {{ volume }})
        - delay: >-
            {{ duration if duration is defined else 0 | int(1) }}
      else:
        - variables:
            # Compress all whitespace; remove all HTML-tags (they are
            # pronounced, instead of being used as intonation hints as I
            # would've hoped); convert timestamps into a format slightly more
            # conductive to TTS; replace "ij" with "y" (English-language TTSs
            # trip over it).
            announcement: >-
              {{
                message |
                  regex_replace('[ \n]+', ' ') |
                  regex_replace('<.+?>', '') |
                  regex_replace('0([1-9]{1}):([0-9]{2})', '\g<1>:\g<2>') |
                  regex_replace('([0-9]{1,2}):0([1-9]{1})',
                    '\g<2> past \g<1>') |
                  regex_replace('([0-9]{1,2}):00', '\g<1> o\'clock') |
                  replace('ij', 'y')
              }}
        - service: tts.speak
          data:
            cache: true
            media_player_entity_id: >-
              {{ speaker }}
            message: >-
              {{ announcement }}
            options:
              voice: en_US-danny-low
          target:
            entity_id: tts.piper
        - service: notify.log_tts_announce
          data:
            message: >-
              {{ speaker.split(',') if ',' in speaker else speaker }}:
              {{ announcement }} (🔊 {{ volume }})
        # For queued execution to work properly, the script needs to block while
        # the announcement is playing...
        - delay: >-
            {#
              Crude heuristic to determine the duration of a spoken out string
            #}
            {% if duration is not number %}
              {{ [1, (announcement | length / 10) | round(0)] | max }}
            {% else %}
              {{ duration | int(5) }}
            {% endif %}
  mode: queued
  max: 10
  trace:
    stored_traces: 20
tts_chime:
  alias: TTS chime [internal]
  icon: mdi:instrument-triangle
  fields:
    speaker:
      description: Speaker-entity to chime
      required: true
      selector:
        entity:
          include_entities:
            - group.speakers_all
            - media_player.bpi_m2z
            - media_player.mpi_mq1
            - media_player.pi0_w2
    type:
      description: Type of chime (default "announce")
      required: false
      selector:
        select:
          options:
            - attention
            - announce
            - whisper
            - bridge
  sequence:
    - variables:
        sample: >-
          {% if type == 'bridge' %}
            Pollen.ogg
          {% elif type == 'attention' %}
            Crosswalk.ogg
          {% elif type == 'whisper' %}
            Beginning.ogg
          {% else %}
            Night_Sky.ogg
          {% endif %}
        volume: >-
          {% if type == 'attention' %}
            0.65
          {% elif type == 'whisper' %}
            0.25
          {% elif type == 'bridge' %}
            0.25
          {% else %}
            0.45
          {% endif %}
    - service: media_player.volume_set
      data:
        volume_level: >-
          {{ volume }}
      target:
        entity_id: >-
          {{ speaker }}
    - service: media_player.play_media
      data:
        media_content_type: music
        media_content_id: >-
          media-source://media_source/sd/audio/{{- sample -}}
      target:
        entity_id: >-
          {{ speaker }}
    # Block during the chime
    - delay: "00:00:01"
  mode: single
